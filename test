-- Comprehensive demo of region-folding.nvim
-- Run with: nvim --headless -c "luafile demo.lua" -c "qa"

-- Add the plugin to the Lua path
local current_file = debug.getinfo(1, "S").source:sub(2)
local plugin_dir = vim.fn.fnamemodify(current_file, ":p:h")
package.path = plugin_dir .. "/lua/?.lua;" .. plugin_dir .. "/lua/?/init.lua;" .. package.path

print("üöÄ Region Folding Demo - Multiple Languages")
print("=" .. string.rep("=", 45))

-- Load the plugin
local plugin = require('region-folding')
plugin.setup({
    region_text = {
        start = "#region",
        ending = "#endregion"
    },
    space_after_comment = true,
    fold_indicator = "‚ñº",
    debug = false
})

local ts = require('region-folding.treesitter')

-- Test cases for different languages
local test_cases = {
    {
        name = "JavaScript",
        filetype = "javascript",
        content = {
            "function example() {",
            "    // #region Configuration",
            "    const config = {",
            "        host: 'localhost',",
            "        port: 3000",
            "    };",
            "    // #endregion",
            "    return config;",
            "}"
        }
    },
    {
        name = "Python",
        filetype = "python",
        content = {
            "class Example:",
            "    # #region Configuration",
            "    def __init__(self):",
            "        self.config = {'host': 'localhost'}",
            "    # #endregion",
            "    ",
            "    def run(self):",
            "        pass"
        }
    },
    {
        name = "Lua",
        filetype = "lua",
        content = {
            "local M = {}",
            "",
            "-- #region Setup Functions",
            "function M.setup(opts)",
            "    M.config = opts",
            "end",
            "-- #endregion",
            "",
            "return M"
        }
    },
    {
        name = "Go",
        filetype = "go",
        content = {
            "package main",
            "",
            "// #region Configuration",
            "type Config struct {",
            "    Host string",
            "    Port int",
            "}",
            "// #endregion",
            "",
            "func main() {}"
        }
    }
}

for i, test_case in ipairs(test_cases) do
    print(string.format("\n%d. Testing %s", i, test_case.name))
    print(string.rep("-", 20))
    
    -- Create buffer and set content
    local buf = vim.api.nvim_create_buf(false, true)
    vim.api.nvim_set_current_buf(buf)
    vim.bo.filetype = test_case.filetype
    vim.api.nvim_buf_set_lines(buf, 0, -1, false, test_case.content)
    
    -- Clear cache to ensure fresh detection
    ts.clear_cache()
    
    -- Test region detection
    local regions = ts.get_regions()
    
    if #regions > 0 then
        print("‚úÖ Found " .. #regions .. " region(s)")
        for j, region in ipairs(regions) do
            print(string.format("   Region %d: lines %d-%d, title: '%s'", 
                j, region.start, region.ending, region.title or 'none'))
            
            -- Test fold levels
            local start_fold = ts.get_fold_level(region.start)
            local end_fold = ts.get_fold_level(region.ending)
            
            if start_fold == "a1" and end_fold == "s1" then
                print("   ‚úÖ Fold levels correct (start: a1, end: s1)")
            else
                print("   ‚ùå Fold levels incorrect (start: " .. start_fold .. ", end: " .. end_fold .. ")")
            end
        end
    else
        print("‚ùå No regions detected")
    end
    
    -- Clean up
    vim.api.nvim_buf_delete(buf, { force = true })
end

print("\nüéâ Demo Complete!")
print("\nThe region-folding.nvim plugin is working correctly across all tested languages.")
print("You can now use it in your Neovim configuration with:")
print()
print([[{
  "nicolas-martin/region-folding.nvim",
  event = { "BufReadPost", "BufNewFile" },
  opts = {
    region_text = {
      start = "#region",
      ending = "#endregion",
    },
    space_after_comment = true,
    fold_indicator = "‚ñº",
  },
}]])